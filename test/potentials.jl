import NRIRHOPM: sum_absolute_diff, sum_squared_diff,
                 potts_model, truncated_absolute_diff, truncated_quadratic_diff,
                 topology_preserving, j·∂†·∂†, j·µá·∂†, j·∂†·µá, j·µá·µá, j·∂†·∂†·∂†, j·µá·∂†·∂†, j·∂†·µá·∂†, j·µá·µá·∂†,
                 j·∂†·∂†·µá, j·µá·∂†·µá, j·∂†·µá·µá, j·µá·µá·µá

# construct simple 0-1 images
targetImage = Float64[1 0 1;
                      0 1 0;
                      0 1 1]

sourceImage = Float64[1 0 1;
                      0 1 0;
                      1 1 0]

# create transform vectors
labels = [(i,j) for i in -1:1, j in -1:1]

# test for sum_absolute_diff
info("Testing sum_absolute_diff:")
cost = sum_absolute_diff(targetImage, sourceImage, labels)
@test all(cost .>= 0)

mat = reshape(cost, length(targetImage), length(labels))
dims = size(targetImage)
for ùíä in CartesianRange(dims)
    i = sub2ind(dims, ùíä.I...)
    for a in find(mat[i,:] .== maximum(mat[i,:]))
        ùê≠ = CartesianIndex(labels[a])
        @test targetImage[ùíä] == sourceImage[ùíä+ùê≠]
    end
end
println("Passed.")

# test for sum_squared_diff
info("Testing sum_squared_diff:")
cost = sum_squared_diff(targetImage, sourceImage, labels)
@test all(cost .>= 0)

mat = reshape(cost, length(targetImage), length(labels))
dims = size(targetImage)
for ùíä in CartesianRange(dims)
    i = sub2ind(dims, ùíä.I...)
    for a in find(mat[i,:] .== maximum(mat[i,:]))
        ùê≠ = CartesianIndex(labels[a])
        @test targetImage[ùíä] == sourceImage[ùíä+ùê≠]
    end
end
println("Passed.")

# test for potts_model
info("Testing potts_model")
# 2D
fp = (1,2)
fq = fp
d = rand()
@test potts_model(fp, fq, d) == 0
fq = (3,4)
@test potts_model(fp, fq, d) == d

# 3D
fp = (1,2,3)
fq = fp
d = rand()
@test potts_model(fp, fq, d) == 0
fq = (2,3,4)
@test potts_model(fp, fq, d) == d
println("Passed.")


# test for truncated_absolute_diff
info("Testing truncated_absolute_diff:")
# 2D
fp = tuple(rand(2)...)
fq = tuple(rand(2)...)

cost = truncated_absolute_diff(fp, fq, 1, Inf)
delta = abs(vecnorm([fp...] - [fq...]))
@test cost == delta

rate = rand()
@test truncated_absolute_diff(fp, fq, rate, Inf) == rate * delta

# d = 0
@test truncated_absolute_diff(fp, fq, 2, 0.0) == 0

# 3D
fp = tuple(rand(3)...)
fq = tuple(rand(3)...)

cost = truncated_absolute_diff(fp, fq, 1, Inf)
delta = abs(vecnorm([fp...] - [fq...]))
@test cost == delta

rate = rand()
@test truncated_absolute_diff(fp, fq, rate, Inf) == rate * delta

# d = 0
@test truncated_absolute_diff(fp, fq, 2, 0) == 0
println("Passed.")

# test for truncated_quadratic_diff
info("Testing truncated_quadratic_diff:")
# 2D
fp = tuple(rand(2)...)
fq = tuple(rand(2)...)

cost = truncated_quadratic_diff(fp, fq, 1, Inf)
delta = vecnorm([fp...] - [fq...])^2
@test cost - delta < 1e-10

rate = rand()
@test truncated_quadratic_diff(fp, fq, rate, Inf) - rate * delta < 1e-10

# d = 0
@test truncated_quadratic_diff(fp, fq, 2, 0) == 0

# 3D
fp = tuple(rand(3)...)
fq = tuple(rand(3)...)

cost = truncated_quadratic_diff(fp, fq, 1, Inf)
delta = vecnorm([fp...] - [fq...])^2
@test cost - delta < 1e-10

rate = rand()
@test truncated_quadratic_diff(fp, fq, rate, Inf) - rate * delta < 1e-10

# d = 0
@test truncated_quadratic_diff(fp, fq, 2, 0) == 0
println("Passed.")

# test for topology_preserving
info("Testing topology_preserving:")
# topology_preserving                        y
#   ‚ñ° ‚ñ¶ ‚ñ°        ‚ñ¶                ‚ñ¶          ‚Üë        ‚¨î => p1 => a
#   ‚¨ì ‚¨î ‚¨ì  =>  ‚¨ì ‚¨î   ‚¨ì ‚¨î    ‚¨î ‚¨ì   ‚¨î ‚¨ì        |        ‚¨ì => p2 => b
#   ‚ñ° ‚ñ¶ ‚ñ°              ‚ñ¶    ‚ñ¶          (x,y):+--> x   ‚ñ¶ => p3 => c
#              J·µá·∂†   J·µá·µá    J·∂†·µá   J·∂†·∂†

# j·∂†·∂†, j·µá·∂†, j·∂†·µá, j·µá·µá
#   ‚ñ° ‚¨ì ‚ñ°        ‚¨ì                ‚¨ì      r,c-->    ‚¨î => p1 => a
#   ‚ñ¶ ‚¨î ‚ñ¶  =>  ‚ñ¶ ‚¨î   ‚ñ¶ ‚¨î    ‚¨î ‚ñ¶   ‚¨î ‚ñ¶    |         ‚¨ì => p2 => b
#   ‚ñ° ‚¨ì ‚ñ°              ‚¨ì    ‚¨ì            ‚Üì         ‚ñ¶ => p3 => c
#              J·µá·µá   J·∂†·µá    J·∂†·∂†   J·µá·∂†

# test for J·µá·∂†
p1 = rand(0:256, 2)
p2 = p1 - [1,0]
p3 = p1 + [0,1]

a, b, c = [1,1], [0,-1], [-1,1]
@test topology_preserving(p2, p1, p3, b, a, c) == 0
@test j·µá·∂†(tuple(a...), tuple(b...), tuple(c...)) == 0

a, b, c = [-1,-1], [0,-1], [-1,1]
@test topology_preserving(p2, p1, p3, b, a, c) == 1
@test j·µá·∂†(tuple(a...), tuple(b...), tuple(c...)) == 1

for i = 1:1000
    a, b, c = rand(-15:15, 2), rand(-15:15, 2), rand(-15:15, 2)
    @test topology_preserving(p2, p1, p3, b, a, c) == j·µá·∂†(tuple(a...), tuple(b...), tuple(c...))
end

# test for J·µá·µá
p1 = rand(0:256, 2)
p2 = p1 - [1,0]
p3 = p1 - [0,1]

a, b, c = [1,-1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 0
@test j·µá·µá(tuple(a...), tuple(b...), tuple(c...)) == 0

a, b, c = [-1,-1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 1
@test j·µá·µá(tuple(a...), tuple(b...), tuple(c...)) == 1

for i = 1:1000
    a, b, c = rand(-15:15, 2), rand(-15:15, 2), rand(-15:15, 2)
    @test topology_preserving(p2, p1, p3, b, a, c) == j·µá·µá(tuple(a...), tuple(b...), tuple(c...))
end

# test for J·∂†·µá
p1 = rand(0:256, 2)
p2 = p1 + [1,0]
p3 = p1 - [0,1]

a, b, c = [-1,1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 0
@test j·∂†·µá(tuple(a...), tuple(b...), tuple(c...)) == 0

a, b, c = [1,-1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 1
@test j·∂†·µá(tuple(a...), tuple(b...), tuple(c...)) == 1

for i = 1:1000
    a, b, c = rand(-15:15, 2), rand(-15:15, 2), rand(-15:15, 2)
    @test topology_preserving(p2, p1, p3, b, a, c) == j·∂†·µá(tuple(a...), tuple(b...), tuple(c...))
end

# test for J·∂†·∂†
p1 = rand(0:256, 2)
p2 = p1 + [1,0]
p3 = p1 + [0,1]

a, b, c = [-1,-1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 0
@test j·∂†·∂†(tuple(a...), tuple(b...), tuple(c...)) == 0

a, b, c = [1,1], [0,0], [0,0]
@test topology_preserving(p2, p1, p3, b, a, c) == 1
@test j·∂†·∂†(tuple(a...), tuple(b...), tuple(c...)) == 1

for i = 1:1000
    a, b, c = rand(-15:15, 2), rand(-15:15, 2), rand(-15:15, 2)
    @test topology_preserving(p2, p1, p3, b, a, c) == j·∂†·∂†(tuple(a...), tuple(b...), tuple(c...))
end

# topology preserving in 3D(just some trivial tests)
# coordinate system(r,c,z):
#  up  r     c --->        z √ó √ó (front to back)
#  to  |   left to right     √ó √ó
# down ‚Üì
# coordinate => point => label:
# iii => p1 => Œ±   jjj => p2 => Œ≤   kkk => p3 => œá   mmm => p5 => Œ¥

# test for J·∂†·∂†·∂†
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·∂†·∂†(a,b,c,d) == 0

a, b, c, d = (1,1,1), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·∂†·∂†(a,b,c,d) == 1

# test for J·µá·∂†·∂†
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·∂†·∂†(a,b,c,d) == 0

a, b, c, d = (-1,1,1), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·∂†·∂†(a,b,c,d) == 1

# test for J·∂†·µá·∂†
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·µá·∂†(a,b,c,d) == 0

a, b, c, d = (1,-1,1), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·µá·∂†(a,b,c,d) == 1

# test for J·µá·µá·∂†
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·µá·∂†(a,b,c,d) == 0

a, b, c, d = (-1,-1,1), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·µá·∂†(a,b,c,d) == 1

# test for J·∂†·∂†·µá
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·∂†·µá(a,b,c,d) == 0

a, b, c, d = (1,1,-1), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·∂†·µá(a,b,c,d) == 1

# test for J·µá·∂†·µá
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·∂†·µá(a,b,c,d) == 0

a, b, c, d = (-1,1,-1), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·∂†·µá(a,b,c,d) == 1

# test for J·∂†·µá·µá
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·µá·µá(a,b,c,d) == 0

a, b, c, d = (1,-1,-1), (0,0,0), (0,0,0), (0,0,0)
@test j·∂†·µá·µá(a,b,c,d) == 1

# test for J·µá·µá·µá
a, b, c, d = (0,0,0), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·µá·µá(a,b,c,d) == 0

a, b, c, d = (-1,-1,-1), (0,0,0), (0,0,0), (0,0,0)
@test j·µá·µá·µá(a,b,c,d) == 1

println("Passed.")
