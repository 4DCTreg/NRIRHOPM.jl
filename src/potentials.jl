# unary potentials
function sum_diff_exp{T,N}(ùìï, fixedImg::AbstractArray{T,N}, movingImg::AbstractArray{T,N}, labels::Array{NTuple{N}})
    imageDims = size(fixedImg)
    imageDims == size(movingImg) || throw(DimensionMismatch("fixedImg and movingImg must be the same size."))
    cost = zeros(prod(imageDims), length(labels))
    for ùíä in CartesianRange(imageDims)
        i = sub2ind(imageDims, ùíä.I...)
        for a in eachindex(labels)
            ùêù = ùíä + CartesianIndex(labels[a])
            if checkbounds(Bool, movingImg, ùêù)
                cost[i,a] = e^-ùìï(fixedImg[ùíä] - movingImg[ùêù])
            else
                cost[i,a] = 0
            end
        end
    end
    return cost
end

"""
    sadexp(fixedImg, movingImg, labels) -> cost

Calculates the sum of absolute differences between fixed(target) image
and warpped image, then applys `f(x)=e‚ÅªÀ£` to the result.
"""
@inline sadexp(fixedImg, movingImg, labels) = sum_diff_exp(abs, fixedImg, movingImg, labels)

"""
    ssdexp(fixedImg, movingImg, labels) -> cost

Calculates the sum of squared differences between fixed(target) image
and warpped image, then applys `f(x)=e‚ÅªÀ£` to the result.
"""
@inline ssdexp(fixedImg, movingImg, labels) = sum_diff_exp(abs2, fixedImg, movingImg, labels)


# pairwise potentials
"""
    potts(fp, fq, d)

Returns the cost value based on Potts model.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 43.
"""
@generated function potts{T<:Real,N}(fp::NTuple{N}, fq::NTuple{N}, d::T)
    ex = :(true)
    for i = 1:N
        ex = :($ex && (fp[$i] == fq[$i]))
    end
    return :($ex ? zero(T) : d)
end


"""
    tad(fp, fq, c, d)

Calculates the truncated absolute difference between two labels.
Returns the cost value.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 43-44.
"""
@generated function tad{N}(fp::NTuple{N}, fq::NTuple{N}, c::Real, d::Real)
    ex = :(0)
    for i = 1:N
        ex = :(abs2(fp[$i]-fq[$i]) + $ex)
    end
    return :(min(c * sqrt($ex), d))
end


"""
    tqd(fp, fq, c, d)

Calculates the truncated quadratic difference between two labels.
Returns the cost value.

Refer to the following paper for further details:

Felzenszwalb, Pedro F., and Daniel P. Huttenlocher. "Efficient belief propagation
for early vision." International journal of computer vision 70.1 (2006): 44-45.
"""
@generated function tqd{N}(fp::NTuple{N}, fq::NTuple{N}, c::Real, d::Real)
    ex = :(0)
    for i = 1:N
        ex = :(abs2(fp[$i]-fq[$i]) + $ex)
    end
    return :(min(c * $ex, d))
end


"""
    topology_preserving(s‚ÇÅ, s‚ÇÇ, s‚ÇÉ, a, b, c)

Returns the cost value: 1 => topology preserving, 0 => otherwise.
Note that the coordinate system is:

```
       y
       ‚Üë
       |
(x,y): +---> x
```

Refer to the following paper for further details:

Cordero-Grande, Lucilio, et al. "A Markov random field approach for
topology-preserving registration: Application to object-based tomographic image
interpolation." IEEE Transactions on Image Processing 21.4 (2012): 2051.
"""
@inline function topology_preserving{T<:Integer}(s‚ÇÅ::Vector{T}, s‚ÇÇ::Vector{T}, s‚ÇÉ::Vector{T}, a::Vector{T}, b::Vector{T}, c::Vector{T})
    @inbounds begin
        ùê§s‚ÇÅ, ùê§s‚ÇÇ, ùê§s‚ÇÉ = s‚ÇÅ + a, s‚ÇÇ + b, s‚ÇÉ + c
        ‚àÇœÜ‚ÇÅ‚àÇœÜ‚ÇÇ = (ùê§s‚ÇÇ[1] - ùê§s‚ÇÅ[1]) * (ùê§s‚ÇÇ[2] - ùê§s‚ÇÉ[2])
        ‚àÇœÜ‚ÇÇ‚àÇœÜ‚ÇÅ = (ùê§s‚ÇÇ[2] - ùê§s‚ÇÅ[2]) * (ùê§s‚ÇÇ[1] - ùê§s‚ÇÉ[1])
        ‚àÇr‚ÇÅ‚àÇr‚ÇÇ = (s‚ÇÇ[1] - s‚ÇÅ[1])*(s‚ÇÇ[2] - s‚ÇÉ[2])
    end
    v = (‚àÇœÜ‚ÇÅ‚àÇœÜ‚ÇÇ - ‚àÇœÜ‚ÇÇ‚àÇœÜ‚ÇÅ) / ‚àÇr‚ÇÅ‚àÇr‚ÇÇ
    return v > 0 ? 1.0 : 0.0
end

"""
    j·∂†·∂†(Œ±,Œ≤,œá)
    j·µá·∂†(Œ±,Œ≤,œá)
    j·∂†·µá(Œ±,Œ≤,œá)
    j·µá·µá(Œ±,Œ≤,œá)

Returns the corresponding cost value: 1 => topology preserving, 0 => otherwise.

```
coordinate system(r,c):
       +---> c
       |
       ‚Üì
       r
coordinate => point => label:
 ii => p1 => Œ±   jj => p2 => Œ≤   kk => p3 => œá
```

Refer to the following paper for further details:

Karacali, Bilge, and Christos Davatzikos. "Estimating topology preserving and
smooth displacement fields." IEEE Transactions on Medical Imaging 23.7 (2004): 870.
"""
@inline j·∂†·∂†{N}(Œ±::NTuple{N}, Œ≤::NTuple{N}, œá::NTuple{N}) = (1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2]) - (œá[1]-Œ±[1])*(Œ≤[2]-Œ±[2]) > 0 ? 1.0 : 0.0
@inline j·µá·∂†{N}(Œ±::NTuple{N}, Œ≤::NTuple{N}, œá::NTuple{N}) = (1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2]) - (œá[1]-Œ±[1])*(Œ±[2]-Œ≤[2]) > 0 ? 1.0 : 0.0
@inline j·∂†·µá{N}(Œ±::NTuple{N}, Œ≤::NTuple{N}, œá::NTuple{N}) = (1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2]) - (Œ±[1]-œá[1])*(Œ≤[2]-Œ±[2]) > 0 ? 1.0 : 0.0
@inline j·µá·µá{N}(Œ±::NTuple{N}, Œ≤::NTuple{N}, œá::NTuple{N}) = (1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2]) - (Œ±[1]-œá[1])*(Œ±[2]-Œ≤[2]) > 0 ? 1.0 : 0.0

"""
    j·∂†·∂†·∂†(Œ±,Œ≤,œá,Œ¥)
    j·µá·∂†·∂†(Œ±,Œ≤,œá,Œ¥)
    j·∂†·µá·∂†(Œ±,Œ≤,œá,Œ¥)
    j·µá·µá·∂†(Œ±,Œ≤,œá,Œ¥)
    j·∂†·∂†·µá(Œ±,Œ≤,œá,Œ¥)
    j·µá·∂†·µá(Œ±,Œ≤,œá,Œ¥)
    j·∂†·µá·µá(Œ±,Œ≤,œá,Œ¥)
    j·µá·µá·µá(Œ±,Œ≤,œá,Œ¥)

Returns the corresponding cost value: 1 => topology preserving, 0 => otherwise.

```
coordinate system(r,c,z):
  up  r     c --->        z √ó √ó (front to back)
  to  |   left to right     √ó √ó
 down ‚Üì
coordinate => point => label:
 iii => p1 => Œ±   jjj => p2 => Œ≤   kkk => p3 => œá   mmm => p5 => Œ¥
```

Refer to the following paper for further details:

Karacali, Bilge, and Christos Davatzikos. "Estimating topology preserving and
smooth displacement fields." IEEE Transactions on Medical Imaging 23.7 (2004): 870.
"""
@inline j·∂†·∂†·∂†{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) + (  œá[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) +
                                                                       (  Œ¥[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(  œá[3]-Œ±[3]) - (  Œ¥[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) -
                                                                       (  œá[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(œá[3]-Œ±[3])) > 0 ? 1.0 : 0.0

@inline j·µá·∂†·∂†{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) + (  œá[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) +
                                                                       (  Œ¥[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(  œá[3]-Œ±[3]) - (  Œ¥[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) -
                                                                       (  œá[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ¥[2]-Œ±[2])*(œá[3]-Œ±[3])) > 0 ? 1.0 : 0.0

@inline j·∂†·µá·∂†{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(1+Œ¥[3]-Œ±[3]) + (  Œ±[1]-œá[1])*(  Œ¥[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) +
                                                                       (  Œ¥[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(  Œ±[3]-œá[3]) - (  Œ¥[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(Œ≤[3]-Œ±[3]) -
                                                                       (  Œ±[1]-œá[1])*(  Œ≤[2]-Œ±[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-œá[3])) > 0 ? 1.0 : 0.0

@inline j·µá·µá·∂†{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2])*(1+Œ¥[3]-Œ±[3]) + (  Œ±[1]-œá[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) +
                                                                       (  Œ¥[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(  Œ±[3]-œá[3]) - (  Œ¥[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(Œ±[3]-Œ≤[3]) -
                                                                       (  Œ±[1]-œá[1])*(  Œ±[2]-Œ≤[2])*(1+Œ¥[3]-Œ±[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ¥[2]-Œ±[2])*(Œ±[3]-œá[3])) > 0 ? 1.0 : 0.0

@inline j·∂†·∂†·µá{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ≤[1]-Œ±[1])*(1+œá[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) + (  œá[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ≤[3]-Œ±[3]) +
                                                                       (  Œ±[1]-Œ¥[1])*(  Œ≤[2]-Œ±[2])*(  œá[3]-Œ±[3]) - (  Œ±[1]-Œ¥[1])*(1+œá[2]-Œ±[2])*(Œ≤[3]-Œ±[3]) -
                                                                       (  œá[1]-Œ±[1])*(  Œ≤[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(œá[3]-Œ±[3])) > 0 ? 1.0 : 0.0

@inline j·µá·∂†·µá{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ±[1]-Œ≤[1])*(1+œá[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) + (  œá[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-Œ≤[3]) +
                                                                       (  Œ±[1]-Œ¥[1])*(  Œ±[2]-Œ≤[2])*(  œá[3]-Œ±[3]) - (  Œ±[1]-Œ¥[1])*(1+œá[2]-Œ±[2])*(Œ±[3]-Œ≤[3]) -
                                                                       (  œá[1]-Œ±[1])*(  Œ±[2]-Œ≤[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ±[2]-Œ¥[2])*(œá[3]-Œ±[3])) > 0 ? 1.0 : 0.0

@inline j·∂†·µá·µá{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ≤[1]-Œ±[1])*(1+Œ±[2]-œá[2])*(1+Œ±[3]-Œ¥[3]) + (  Œ±[1]-œá[1])*(  Œ±[2]-Œ¥[2])*(Œ≤[3]-Œ±[3]) +
                                                                       (  Œ±[1]-Œ¥[1])*(  Œ≤[2]-Œ±[2])*(  Œ±[3]-œá[3]) - (  Œ±[1]-Œ¥[1])*(1+Œ±[2]-œá[2])*(Œ≤[3]-Œ±[3]) -
                                                                       (  Œ±[1]-œá[1])*(  Œ≤[2]-Œ±[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ≤[1]-Œ±[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-œá[3])) > 0 ? 1.0 : 0.0

@inline j·µá·µá·µá{N}(Œ±::NTuple{N},Œ≤::NTuple{N},œá::NTuple{N},Œ¥::NTuple{N}) = ((1+Œ±[1]-Œ≤[1])*(1+Œ±[2]-œá[2])*(1+Œ±[3]-Œ¥[3]) + (  Œ±[1]-œá[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-Œ≤[3]) +
                                                                       (  Œ±[1]-Œ¥[1])*(  Œ±[2]-Œ≤[2])*(  Œ±[3]-œá[3]) - (  Œ±[1]-Œ¥[1])*(1+Œ±[2]-œá[2])*(Œ±[3]-Œ≤[3]) -
                                                                       (  Œ±[1]-œá[1])*(  Œ±[2]-Œ≤[2])*(1+Œ±[3]-Œ¥[3]) - (1+Œ±[1]-Œ≤[1])*(  Œ±[2]-Œ¥[2])*(Œ±[3]-œá[3])) > 0 ? 1.0 : 0.0
